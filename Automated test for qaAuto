// Generated by Selenium IDE
const { Builder, By, Key, until } = require('selenium-webdriver')
const assert = require('assert')

describe('Registration', function() {
  this.timeout(30000)
  let driver
  let vars
  beforeEach(async function() {
    driver = await new Builder().forBrowser('chrome').build()
    vars = {}
  })
  afterEach(async function() {
    await driver.quit();
  })
  it('Registration', async function() {
    await driver.get("https://guest:welcome2qauto@qauto.forstudy.space/")
    await driver.manage().window().setRect({ width: 1382, height: 736 })
    await driver.findElement(By.css(".hero-descriptor_btn")).click()
    vars["randomUserData"] = await driver.executeScript("function generateRandomFirstName() {     const firstNames = [\'Alice\', \'Bob\', \'Charlie\', \'David\', \'Eve\'];     return firstNames[Math.floor(Math.random() * firstNames.length)]; }  function generateRandomLastName() {     const lastNames = [\'Smith\', \'Johnson\', \'Williams\', \'Brown\', \'Jones\'];     return lastNames[Math.floor(Math.random() * lastNames.length)]; }  function generateRandomEmail(firstName, lastName) {     const domains = [\'example.com\', \'test.com\', \'demo.com\'];     const domain = domains[Math.floor(Math.random() * domains.length)];     return \\`arguments[0].arguments[1]@arguments[2]\\`; }  const randomFirstName = generateRandomFirstName(); const randomLastName = generateRandomLastName(); const randomEmail = generateRandomEmail(randomFirstName, randomLastName); return { firstName: randomFirstName, lastName: randomLastName, email: randomEmail };", vars["firstName.toLowerCase()"],vars["lastName.toLowerCase()"],vars["domain"])
    await driver.findElement(By.id("signupName")).click()
    await driver.findElement(By.id("signupName")).sendKeys("${randomUserData.firstName}")
    await driver.findElement(By.id("signupLastName")).sendKeys("${randomUserData.lastName}")
    await driver.findElement(By.id("signupEmail")).sendKeys("${randomUserData.email}")
    await driver.findElement(By.id("signupPassword")).sendKeys("A123456a")
    await driver.findElement(By.id("signupRepeatPassword")).sendKeys("A123456a")
    await driver.findElement(By.css(".btn-primary:nth-child(1)")).click()
    await driver.findElement(By.id("userNavDropdown")).click()
    await driver.findElement(By.linkText("Profile")).click()
    assert(await driver.findElement(By.css(".profile_name")).getText() == "${randomUserData.firstName} ${randomUserData.lastName}")
    await driver.findElement(By.id("userNavDropdown")).click()
    await driver.findElement(By.css(".dropdown-item:nth-child(1)")).click()
    await driver.findElement(By.css(".btn-primary")).click()
    await driver.findElement(By.id("addCarBrand")).click()
    {
      const dropdown = await driver.findElement(By.id("addCarBrand"))
      await dropdown.findElement(By.xpath("//option[. = 'BMW']")).click()
    }
    await driver.findElement(By.id("addCarModel")).click()
    {
      const dropdown = await driver.findElement(By.id("addCarModel"))
      await dropdown.findElement(By.xpath("//option[. = '5']")).click()
    }
    await driver.findElement(By.id("addCarMileage")).click()
    await driver.findElement(By.id("addCarMileage")).sendKeys("50")
    {
      const element = await driver.findElement(By.css(".modal-footer > .btn-primary"))
      await driver.actions({ bridge: true }).moveToElement(element).clickAndHold().perform()
    }
    {
      const element = await driver.findElement(By.css(".modal-footer > .btn-primary"))
      await driver.actions({ bridge: true }).moveToElement(element).perform()
    }
    {
      const element = await driver.findElement(By.css(".modal-footer > .btn-primary"))
      await driver.actions({ bridge: true }).moveToElement(element).release().perform()
    }
    await driver.findElement(By.css(".modal-footer > .btn-primary")).click()
    await driver.findElement(By.css(".car_add-expense")).click()
    await driver.findElement(By.id("addExpenseMileage")).click()
    await driver.findElement(By.id("addExpenseMileage")).click()
    await driver.findElement(By.id("addExpenseMileage")).click()
    await driver.findElement(By.id("addExpenseMileage")).click()
    {
      const element = await driver.findElement(By.id("addExpenseMileage"))
      await driver.actions({ bridge: true}).doubleClick(element).perform()
    }
    {
      const element = await driver.findElement(By.id("addExpenseMileage"))
      await driver.actions({ bridge: true }).moveToElement(element).clickAndHold().perform()
    }
    {
      const element = await driver.findElement(By.id("addExpenseMileage"))
      await driver.actions({ bridge: true }).moveToElement(element).perform()
    }
    {
      const element = await driver.findElement(By.id("addExpenseMileage"))
      await driver.actions({ bridge: true }).moveToElement(element).release().perform()
    }
    await driver.findElement(By.id("addExpenseMileage")).click()
    await driver.findElement(By.id("addExpenseMileage")).sendKeys("100")
    await driver.findElement(By.id("addExpenseLiters")).click()
    await driver.findElement(By.id("addExpenseLiters")).sendKeys("10")
    await driver.findElement(By.id("addExpenseTotalCost")).click()
    await driver.findElement(By.id("addExpenseTotalCost")).sendKeys("10")
    await driver.findElement(By.css(".modal-footer > .btn-primary")).click()
    await driver.findElement(By.id("userNavDropdown")).click()
    await driver.findElement(By.linkText("Settings")).click()
    await driver.findElement(By.css(".btn-danger-bg")).click()
    {
      const element = await driver.findElement(By.css(".btn-danger-bg"))
      await driver.actions({ bridge: true }).moveToElement(element).perform()
    }
    {
      const element = await driver.findElement(By.CSS_SELECTOR, "body")
      await driver.actions({ bridge: true }).moveToElement(element, 0, 0).perform()
    }
    await driver.findElement(By.css(".btn-danger")).click()
  })
})
